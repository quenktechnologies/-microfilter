{"version":3,"sources":["../src/Ast.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;IAGM,G;;;;;;;;;AAEF;;;;;;gCAMQ,K,EAAO,Q,EAAU;;AAErB,mBAAO;AACH,sBAAM,SADH;AAEH,4BAFG;AAGH;AAHG,aAAP;AAMH;;AAED;;;;;;;;;+BAMO,K,EAAO,Q,EAAU;;AAEpB,mBAAO;AACH,sBAAM,QADH;AAEH,4BAFG;AAGH;AAHG,aAAP;AAMH;;AAED;;;;;;;;;+BAMO,K,EAAO,Q,EAAU;;AAEpB,mBAAO;AACH,sBAAM,QADH;AAEH,4BAFG;AAGH;AAHG,aAAP;AAMH;;AAED;;;;;;;;;8BAMM,K,EAAO,Q,EAAU;;AAEnB,mBAAO;AACH,sBAAM,OADH;AAEH,4BAFG;AAGH;AAHG,aAAP;AAMH;;AAED;;;;;;;;;+BAMO,K,EAAO,Q,EAAU;;AAEpB,mBAAO;AACH,sBAAM,QADH;AAEH,4BAFG;AAGH;AAHG,aAAP;AAMH;;AAED;;;;;;;;;;+BAOO,K,EAAO,E,EAAI,K,EAAO,Q,EAAU;;AAE/B,mBAAO;AACH,4BADG;AAEH,sBAFG;AAGH,4BAHG;AAIH;AAJG,aAAP;AAOH;;AAED;;;;;;;;;;4BAOI,I,EAAM,I,EAAM,Q,EAAU;;AAEtB,mBAAO;AACH,sBAAM,KADH;AAEH,0BAFG;AAGH,0BAHG;AAIH;AAJG,aAAP;AAOH;;AAED;;;;;;;;;;2BAOG,I,EAAM,I,EAAM,Q,EAAU;;AAE5B,mBAAO;AACI,sBAAM,IADV;AAEI,0BAFJ;AAGI,0BAHJ;AAII;AAJJ,aAAP;AAOI;;AAED;;;;;;;;;8BAMM,O,EAAS,Q,EAAU;;AAErB,mBAAO;AACH,sBAAM,OADH;AAEH,gCAFG;AAGH;AAHG,aAAP;AAMH;;;;;;kBAIU,G","file":"Ast.js","sourcesContent":["/**\n * Ast provides factory functions for all the nodes recognized by the parser.\n */\nclass Ast {\n\n    /**\n     * boolean\n     * @param {string} value \n     * @param {Location} location \n     * @returns {object}\n     */\n    boolean(value, location) {\n\n        return {\n            type: 'boolean',\n            value,\n            location\n        }\n\n    }\n\n    /**\n     * number\n     * @param {string} value \n     * @param {Location} location \n     * @returns {object}\n     */\n    number(value, location) {\n\n        return {\n            type: 'number',\n            value,\n            location\n        };\n\n    }\n\n    /**\n     * string\n     * @param {string} value \n     * @param {Location} location \n     * @returns {object}\n     */\n    string(value, location) {\n\n        return {\n            type: 'string',\n            value,\n            location\n        };\n\n    }\n\n    /**\n     * field\n     * @param {string} label\n     * @param {Location} location \n     * @returns {object}\n     */\n    field(label, location) {\n\n        return {\n            type: 'field',\n            label,\n            location\n        };\n\n    }\n\n    /**\n     * regexp\n     * @param {string} value \n     * @param {Location} location \n     * @returns {object}\n     */\n    regexp(value, location) {\n\n        return {\n            type: 'regexp',\n            value,\n            location\n        };\n\n    }\n\n    /**\n     * filter\n     * @param {string} field \n     * @param {string} op \n     * @param {*} value\n     * @returns {object}\n     */\n    filter(field, op, value, location) {\n\n        return {\n            field,\n            op,\n            value,\n            location\n        };\n\n    }\n\n    /**\n     * and\n     * @param {Filter} lval \n     * @param {Filter} rval \n     * @param {Location} location \n     * @returns\n     */\n    and(lval, rval, location) {\n\n        return {\n            type: 'and',\n            lval,\n            rval,\n            location\n        };\n\n    }\n\n    /**\n     * or\n     * @param {Filter} lval \n     * @param {Filter} rval \n     * @param {Location} location \n     * @returns\n     */\n    or(lval, rval, location) {\n    \n return {\n            type: 'or',\n            lval,\n            rval,\n            location\n        };\n    \n    }\n\n    /**\n     * query\n     * @param {array<Filter>} filters \n     * @param {Location} location \n     * @returns {object}\n     */\n    query(filters, location) {\n\n        return {\n            type: 'query',\n            filters,\n            location\n        };\n\n    }\n\n}\n\nexport default Ast\n"]}